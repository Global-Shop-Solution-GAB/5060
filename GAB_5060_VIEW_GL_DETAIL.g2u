Program.Sub.ScreenSU.Start
Gui.F_ViewGL..Create
Gui.F_ViewGL..Caption("GL Transaction Detail")
Gui.F_ViewGL..Size(14250,9030)
Gui.F_ViewGL..MinX(0)
Gui.F_ViewGL..MinY(0)
Gui.F_ViewGL..Position(0,0)
Gui.F_ViewGL..FontSize(9)
Gui.F_ViewGL..BackColor(-2147483633)
Gui.F_ViewGL..MousePointer(0)
Gui.F_ViewGL..Event(UnLoad,Unload)
Gui.F_ViewGL.frame1.Create(Frame)
Gui.F_ViewGL.frame1.Size(5115,810)
Gui.F_ViewGL.frame1.Position(60,90)
Gui.F_ViewGL.frame1.Caption("GL Account")
Gui.F_ViewGL.frame1.FontSize(9)
Gui.F_ViewGL.txtAccount.Create(TextBox,"",True,1605,315,0,120,300,True,0,"Arial",9,-2147483643,1)
Gui.F_ViewGL.txtAccount.Parent("frame1")
Gui.F_ViewGL.txtAccount.Event(LostFocus,txtAccount_LostFocus)
Gui.F_ViewGL.txtAccountDesc.Create(TextBox,"",True,3165,315,0,1815,300,True,0,"Arial",9,-2147483643,1)
Gui.F_ViewGL.txtAccountDesc.Parent("frame1")
Gui.F_ViewGL.txtAccountDesc.Locked(True)
Gui.F_ViewGL.frame2.Create(Frame)
Gui.F_ViewGL.frame2.Size(1785,810)
Gui.F_ViewGL.frame2.Position(5310,90)
Gui.F_ViewGL.frame2.Caption("Starting")
Gui.F_ViewGL.frame2.FontSize(9)
Gui.F_ViewGL.dtpStart.Create(DatePicker)
Gui.F_ViewGL.dtpStart.Size(1560,285)
Gui.F_ViewGL.dtpStart.Position(120,300)
Gui.F_ViewGL.dtpStart.Parent("frame2")
Gui.F_ViewGL.frame3.Create(Frame)
Gui.F_ViewGL.frame3.Size(1785,810)
Gui.F_ViewGL.frame3.Position(7230,90)
Gui.F_ViewGL.frame3.Caption("Ending")
Gui.F_ViewGL.frame3.FontSize(9)
Gui.F_ViewGL.dtpEnd.Create(DatePicker)
Gui.F_ViewGL.dtpEnd.Size(1560,285)
Gui.F_ViewGL.dtpEnd.Position(120,300)
Gui.F_ViewGL.dtpEnd.Parent("frame3")
Gui.F_ViewGL.GsGCDetail.Create(GsGridControl)
Gui.F_ViewGL.GsGCDetail.Size(13875,7395)
Gui.F_ViewGL.GsGCDetail.Position(60,975)
Gui.F_ViewGL.cmdRefresh.Create(Button)
Gui.F_ViewGL.cmdRefresh.Size(1740,810)
Gui.F_ViewGL.cmdRefresh.Position(9135,90)
Gui.F_ViewGL.cmdRefresh.Caption("REFRESH")
Gui.F_ViewGL.cmdRefresh.FontSize(9)
Gui.F_ViewGL.cmdRefresh.Event(Click,cmdRefresh_Click)
Program.Sub.ScreenSU.End

Program.Sub.Preflight.Start
V.Global.sCoCurrency.Declare
Program.Sub.Preflight.End

Program.Sub.Main.Start
V.Local.sIconPath.Declare

'Set up GSS logo
F.Intrinsic.String.Concat(V.Caller.GlobalDir,"\ART\gss2.ico",V.Local.sIconPath)
Gui.F_ViewGL..Icon(V.Local.sIconPath)

F.ODBC.Connection!conx.OpenConnection(V.Ambient.PDSN,V.Ambient.PUser,V.Ambient.PPass,2000)

F.Data.Dictionary.CreateFromSQL("dicGL","conx","select gl_account as Account, rtrim(gl_account) from v_gl_master order by gl_account")
Gui.F_ViewGL.txtAccount.AddAutoCompleteItem("dicGL","Dictionary")
F.Data.Dictionary.Close("dicGL")

'Get base currency from V_COMPANY_OPT
F.ODBC.Connection!conx.OpenLocalRecordsetRO("rst","SELECT CURRENCY FROM V_COMPANY_OPT")
V.Global.sCoCurrency.Set(V.ODBC.conx!rst.FieldValTrim!CURRENCY)
F.ODBC.conx!rst.Close

F.Intrinsic.Control.CallSub(loaddatatable)
F.Intrinsic.Control.CallSub(SetContextMenus)

Gui.F_ViewGL.GsGCDetail.Anchor(15)

Gui.F_ViewGL..Show
Program.Sub.Main.End

Program.Sub.Unload.Start
F.Data.DataTable.Close("dtGLDesc")
F.Data.DataTable.Close("dtCalendar")
F.Data.DataTable.Close("dtCash")
F.ODBC.Connection!conx.Close
F.Intrinsic.Control.End

Program.Sub.Unload.End

Program.Sub.txtAccount_LostFocus.Start
F.Intrinsic.Control.BlockEvents
V.Local.iWidths.Declare
V.Local.sAccount.Declare
V.Local.sFilter.Declare
V.Local.sRet.Declare
V.Local.sTitles.Declare

V.Local.sAccount.Set(V.Screen.F_ViewGL!txtAccount.Text)
'Verify the entered GL account is correct
F.Intrinsic.String.Build("Account = '{0}'",V.Local.sAccount.Trim,V.Local.sFilter)
F.Data.DataTable.Select("dtGLDesc",V.Local.sFilter,V.Local.sRet)
F.Intrinsic.Control.If(V.Local.sRet,<>,"***NORETURN***")
	'GL account is found, load description to textbox
	Gui.F_ViewGL.txtAccountDesc.Text(V.DataTable.dtGLDesc(V.Local.sRet).Description!FieldValTrim)
F.Intrinsic.Control.Else
	'GL account is not found, warn user and open GL account browser
	F.Intrinsic.UI.Msgbox("Invalid GL account")
	
	'Open chart of accounts browser
	F.Intrinsic.String.Split("GL Account*!*Description","*!*",V.Local.sTitles)
	F.Intrinsic.String.Split("1200*!*2500","*!*",V.Local.iWidths)
	F.Intrinsic.UI.SetBrowserHotTypeAhead(True)
	F.Intrinsic.UI.Browser("Select a GL account","conx","select gl_account as Account, descr as Description from v_gl_master order by gl_account",V.Local.sTitles,V.Local.iWidths,12500,10000,V.Local.sRet)
	
	F.Intrinsic.Control.If(V.Local.sRet,<>,"***CANCEL***")
		F.Intrinsic.String.Split(V.Local.sRet,"*!*",V.Local.sRet)
		Gui.F_ViewGL.txtAccount.Text(V.Local.sRet(0).trim)
		Gui.F_ViewGL.txtAccountDesc.Text(V.Local.sRet(1).Trim)
	F.Intrinsic.Control.EndIf
F.Intrinsic.Control.EndIf
F.Intrinsic.Control.UnBlockEvents
Program.Sub.txtAccount_LostFocus.End

Program.Sub.cmdRefresh_Click.Start
V.Local.dBeg.Declare(Date)
V.Local.dEnd.Declare(Date)

V.Local.iYear1.Declare
V.Local.iYear2.Declare

V.Local.sAccount.Declare
V.Local.sFormattedDate.Declare
V.Local.sFilter.Declare
V.Local.sRet.Declare

V.Local.dBeg.Set(V.Screen.F_ViewGL!dtpStart.Value)
V.Local.dEnd.Set(V.Screen.F_ViewGL!dtpEnd.Value)

'Check if starting date is before ending date
F.Intrinsic.Control.If(V.Local.dBeg,>,V.Local.dEnd)
	F.Intrinsic.UI.Msgbox("Starting date must not be after Ending date")
	Gui.F_ViewGL.dtpEnd.Value(V.Local.dBeg)
F.Intrinsic.Control.Else
	'Check if the selected date cross financial year
	F.Intrinsic.String.Format(V.Local.dEnd,"MM/DD/YY",V.Local.sFormattedDate)
	F.Intrinsic.String.Build("Beginning <= #{0}# AND Ending >= #{0}#",V.Local.sFormattedDate,V.Local.sFilter)
	F.Data.DataTable.Select("dtCalendar",V.Local.sFilter,V.Local.sRet)
	F.Intrinsic.Control.If(V.Local.sRet,=,"***NORETURN***")
		F.Intrinsic.UI.Msgbox("GL calendar is not found for the ending date. Please check General Ledger > Administration > Calendar Period Maintenance or change the ending date.")
		F.Intrinsic.Control.ExitSub
	F.Intrinsic.Control.Else
		V.Local.iYear2.Set(V.DataTable.dtCalendar(V.Local.sRet).FYR!FieldVal)
	F.Intrinsic.Control.EndIf
	F.Intrinsic.String.Format(V.Local.dBeg,"MM/DD/YY",V.Local.sFormattedDate)
	F.Intrinsic.String.Build("Beginning <= #{0}# AND Ending >= #{0}#",V.Local.sFormattedDate,V.Local.sFilter)
	F.Data.DataTable.Select("dtCalendar",V.Local.sFilter,V.Local.sRet)
	F.Intrinsic.Control.If(V.Local.sRet,=,"***NORETURN***")
		F.Intrinsic.UI.Msgbox("GL calendar is not found for the starting date.Please check General Ledger > Administration > Calendar Period Maintenance or change the starting date.")
		F.Intrinsic.Control.ExitSub
	F.Intrinsic.Control.Else
		V.Local.iYear1.Set(V.DataTable.dtCalendar(V.Local.sRet).FYR!FieldVal)
	F.Intrinsic.Control.EndIf
	F.Intrinsic.Control.If(V.Local.iYear1,=,V.Local.iYear2)
		'Check if GL account has been selected
		V.Local.sAccount.Set(V.Screen.F_ViewGL!txtAccount.Text)
		'Verify the entered GL account is correct
		F.Intrinsic.String.Build("Account = '{0}'",V.Local.sAccount.Trim,V.Local.sFilter)
		F.Data.DataTable.Select("dtGLDesc",V.Local.sFilter,V.Local.sRet)
		F.Intrinsic.Control.If(V.Local.sRet,=,"***NORETURN***")
			F.Intrinsic.UI.Msgbox("Please enter a valid GL account.")
		F.Intrinsic.Control.Else
			F.Intrinsic.Control.CallSub(LoadTransaction)
		F.Intrinsic.Control.EndIf
	F.Intrinsic.Control.Else
		F.Intrinsic.UI.Msgbox("Starting and Ending date must not cross financial year.")
		'Change ending date to the year end date of fiscal year starting date
		F.Intrinsic.String.Build("FYR = '{0}'",V.Local.iYear1,V.Local.sFilter)
		F.Data.DataTable.Select("dtCalendar",V.Local.sFilter,V.Local.sRet)
		Gui.F_ViewGL.dtpEnd.Value(V.DataTable.dtCalendar(V.Local.sRet).Ending!FieldVal)
	F.Intrinsic.Control.EndIf
F.Intrinsic.Control.EndIf
Program.Sub.cmdRefresh_Click.End

Program.Sub.LoadDatatable.Start
V.Local.i1.Declare
V.Local.sBankAccount.Declare
V.Local.sVersion.Declare

'Datatable for GL account description reference
F.Data.DataTable.CreateFromSQL("dtGLDesc","conx","select gl_account as Account, descr as Description from v_gl_master",True)

'Datatable for fiscal year reference
F.Data.DataTable.CreateFromSQL("dtCalendar","conx","select distinct start_year as FYR from v_gl_calendar",True)
F.Data.DataTable.AddColumn("dtCalendar","Beginning","Date")
F.Data.DataTable.AddColumn("dtCalendar","Ending","Date")
F.Data.Dictionary.CreateFromSQL("dicBeg","conx","select start_year, beg_date from v_gl_calendar where period = '01'")
F.Data.Dictionary.SetDefaultReturn("dicBeg",V.Ambient.Date)
F.Data.DataTable.FillFromDictionary("dtCalendar","dicBeg","FYR","Beginning")
F.Data.Dictionary.Close("dicBeg")
F.Data.Dictionary.CreateFromSQL("dicBeg","conx","select start_year, end_date from v_gl_calendar where period = '12'")
F.Data.Dictionary.SetDefaultReturn("dicBeg",V.Ambient.Date)
F.Data.DataTable.FillFromDictionary("dtCalendar","dicBeg","FYR","Ending")
F.Data.Dictionary.Close("dicBeg")

f.Intrinsic.String.Left(V.Caller.GSSVersion,4,V.Local.sVersion)

F.Intrinsic.Control.If(V.Local.sVersion,=,"2018")
	F.Data.DataTable.CreateFromSQL("dtCash","conx","select gl_cash_acct as Account, exch_curr as Currency, bank_desc as BankDesc, bank_account as BankAccount from v_cash_account",True)
'F.Intrinsic.Control.ElseIf(V.Caller.GSSVersion,=,"2019.1","or",V.Caller.GSSVersion,=,"2020.1")
F.Intrinsic.Control.ElseIf(V.Local.sVersion,=>,"2019")
	F.Data.DataTable.CreateFromSQL("dtCash","conx","select gl_cash_acct as Account, exch_curr as Currency, bank_desc as BankDesc, bank_account_Enc as BankAccountEnc from v_cash_account",True)
	F.Data.DataTable.AddColumn("dtCash","BankAccount","String")	
	
	F.Intrinsic.Control.For(V.Local.i1,0,V.DataTable.dtCash.RowCount--,1)
		F.Global.Encryption.Decrypt(V.DataTable.dtCash(V.Local.i1).BankAccountEnc!FieldVal,V.Local.sBankAccount)
		F.Data.DataTable.SetValue("dtCash",V.Local.i1,"BankAccount",V.Local.sBankAccount.Trim)
	F.Intrinsic.Control.Next(V.Local.i1)
F.Intrinsic.Control.EndIf
Program.Sub.LoadDatatable.End

Program.Sub.LoadTransaction.Start
F.Intrinsic.Control.Try
V.Local.sError.Declare

V.Local.dBegBeg.Declare(Date)
V.Local.dBegEnd.Declare(Date)
V.Local.dEnd.Declare(Date)
V.Local.dStart.Declare(Date)
V.Local.fAmtPosted.Declare
V.Local.fBegBal.Declare
V.Local.fEndBal.Declare
V.Local.i1.Declare
V.Local.iIndex.Declare
V.Local.iYear.Declare
V.Local.sAccount.Declare
V.Local.sAccountDesc.Declare
V.Local.sFilter.Declare
V.Local.sFormattedDate.Declare
V.Local.sRet.Declare
V.Local.sSQL.Declare
V.Local.bCheck.Declare

Gui.F_ViewGL.GsGCDetail.Visible(False)

F.Intrinsic.Control.If(V.DataTable.dtDetail.Exists,=,True)
	F.Data.DataTable.Close("dtDetail")
F.Intrinsic.Control.EndIf

V.Local.dStart.Set(V.Screen.F_ViewGL!dtpStart.Value)
V.Local.dEnd.Set(V.Screen.F_ViewGL!dtpEnd.Value)

V.Local.sAccount.Set(V.Screen.F_ViewGL!txtAccount.Text)

'Non cash account, reconcile based on base currency showing foreign currency whenever applicable
'Get GL detail from beginning of the fiscal year until the selected ending date
F.Intrinsic.String.Build("select A.batch+convert(A.line,sql_char) as BATCHLINE, '' as BI, A.batch as BATCH, A.post_Date_sql as POSTDATE, Cast('1900-01-01' as DATE) as INVCDATE, Cast('1900-01-01' as DATE) as CHECKDATE, '' as CHECKNUM, '' as VENDCUST, A.line as LINE, A.description as DESCRIPTION, A.Voucher as REFERENCE, A.REFERENCE as JEREF, '' as INVCNOTE, convert(A.amount_cmpny,sql_float) as AMOUNT, '' as INVOICE, If(B.exchange_curr<>'',B.exchange_curr,'{3}') as CURRENCY, if(convert(B.amount_forex,sql_float)<>'',convert(B.amount_forex,sql_float),0) as AMOUNTF, if(convert(Exchange_Rate,sql_numeric)<>'',convert(Exchange_Rate,sql_float),0) as EXCHRATE from v_gl_journal_dtl A Left Join GAB_5060_BATCH_DTL B On A.Batch = B.Batch and A.Line = B.Line and A.Post_Date_SQL = B.Post_Date_SQL where A.gl_number = '{0}' and A.post_date_sql between '{1}' and '{2}' order by A.batch, A.post_Date_sql, A.line",V.Local.sAccount.Trim,V.Local.dStart.PervasiveDate,V.Local.dEnd.PervasiveDate,V.Global.sCoCurrency,V.Local.sSQL)
F.Data.DataTable.CreateFromSQL("dtGL","conx",V.Local.sSQL,True)
F.Data.DataTable.AddColumn("dtGL","Mode","String","JE")

F.Intrinsic.String.Build("select A.batch+convert(A.line,sql_char) as BATCHLINE, '' as BI, A.batch as BATCH, A.post_Date_sql as POSTDATE, Cast('1900-01-01' as DATE) as INVCDATE, Cast('1900-01-01' as DATE) as CHECKDATE, '' as CHECKNUM, '' as VENDCUST, A.line as LINE, A.description as DESCRIPTION, A.Voucher as REFERENCE, A.REFERENCE as JEREF, '' as INVCNOTE, convert(A.amount_cmpny, sql_float) as AMOUNT, '' as INVOICE, '{3}' as CURRENCY, convert(0,sql_float) as AMOUNTF, convert(0,sql_float) as EXCHRATE from v_gl_detail A where left(A.batch,1) = 'E' and A.gl_number = '{0}' and A.post_date_sql between '{1}' and '{2}' order by A.batch, A.post_Date_sql, A.line",V.Local.sAccount.Trim,V.Local.dStart.PervasiveDate,V.Local.dEnd.PervasiveDate,V.Global.sCoCurrency,V.Local.sSQL)

F.Data.DataTable.CreateFromSQL("dtInvt","conx",V.Local.sSQL,True)
F.Data.DataTable.AddColumn("dtInvt","Mode","String","Invt.")
F.Data.DataTable.Merge("dtInvt","dtGL",True,1)
F.Data.DataTable.Close("dtInvt")

F.Intrinsic.String.Build("select batch+convert(line,sql_char) as BATCHLINE, '' as BI, batch as BATCH, post_Date_sql as POSTDATE, invc_date_sql as INVCDATE, Cast('1900-01-01' as DATE) as CHECKDATE, '' as CHECKNUM, A.Vendor as VENDCUST, line as LINE, vendor_name as DESCRIPTION, ' ' as REFERENCE,'' as JEREF, B.Text as INVCNOTE, convert(amount_cmpny, sql_float) as AMOUNT, invoice_no as INVOICE, exch_vend_curr as CURRENCY, convert(amount_vend, sql_float) as AMOUNTF, convert(Exch_Vend_Rate, sql_float) as EXCHRATE from v_gl_ap_detail A Left Join v_ap_invc_notes B on A.Vendor = B.Vendor and A.Invoice_No = B.Invoice where gl_number = '{0}' and post_date_sql between '{1}' and '{2}' order by batch, post_Date_sql, line",V.Local.sAccount.Trim,V.Local.dStart.PervasiveDate,V.Local.dEnd.PervasiveDate,V.Local.sSQL)
F.Data.DataTable.CreateFromSQL("dtAP","conx",V.Local.sSQL,True)
F.Data.DataTable.AddColumn("dtAP","Mode","String","AP")
F.Data.DataTable.Merge("dtAP","dtGL",True,1)
F.Data.DataTable.Close("dtAP")

'AP Check
'F.Intrinsic.String.Build("select A.batch+convert(A.line,sql_char) as BatchLine, A.batch as Batch, post_Date_sql as PostDate, A.line as Line, name_vendor as Description, ' ' as Reference, amount_cmpny as Amount, invoice_no as Invoice from v_gl_ap_check_dtl A left join (select batch as Batch, cust_vendor from v_gl_ap_check_dtl where post_date_sql between '{1}' and '{2}' and cust_vendor <> '' group by Batch, cust_vendor)C On A.Batch = C.Batch Left Join v_vendor_master B on C.cust_vendor = B.vendor where gl_number = '{0}' and post_date_sql between '{1}' and '{2}' order by batch, post_Date_sql, line",V.Local.sAccount.Trim,V.Local.dStart.PervasiveDate,V.Local.dEnd.PervasiveDate,V.Local.sSQL)
'F.Intrinsic.String.Build("select A.batch+convert(A.line,sql_char) as BatchLine, A.batch as Batch, A.post_Date_sql as PostDate, A.line as Line, name_vendor as Description, ' ' as Reference, amount_cmpny as Amount, invoice_no as Invoice from v_gl_ap_check_dtl A Inner Join (Select Batch, Post_Date_Sql from V_GL_Detail Group by Batch,Post_Date_Sql) B on A.Batch = B.Batch and Cast(A.Post_Date_sql as Date) = Cast(B.Post_Date_sql as Date) left join (select batch as Batch, cust_vendor from v_gl_ap_check_dtl where post_date_sql between '{1}' and '{2}' and cust_vendor <> '' group by Batch, cust_vendor)C On A.Batch = C.Batch Left Join v_vendor_master D on C.cust_vendor = D.vendor where gl_number = '{0}' and A.post_date_sql between '{1}' and '{2}' order by batch, A.post_Date_sql, line",V.Local.sAccount.Trim,V.Local.dStart.PervasiveDate,V.Local.dEnd.PervasiveDate,V.Local.sSQL)
F.Intrinsic.String.Build("select gl_cash_acct as Account, exch_curr as CURRENCY, bank_desc as BankDesc from v_cash_account where gl_cash_acct = '{0}'",V.Local.sAccount.Trim,V.Local.sSQL)
F.ODBC.Connection!conx.OpenLocalRecordsetRO("rst",V.Local.sSQL)
F.Intrinsic.Control.If(V.ODBC.conx!rst.EOF,=,False)
V.Local.bCheck.Set(True)
'	F.Intrinsic.String.Build("select A.batch+convert(A.line,sql_char) as BatchLine, A.Batch+A.Cust_Vendor as BI, A.batch as Batch, A.post_Date_sql as PostDate, Cast('1900-01-01' as DATE) as INVCDATE, C.date_check as CheckDate, C.check_num as CheckNum, A.line as Line, C.Vendor as VendCust, name_vendor as Description, ' ' as Reference, '' as JEREF, '' as INVCNOTE, -c.Amount as Amount, invoice_no as Invoice, IF(C.Exchange_curr<>'',C.Exchange_curr,'{3}') as Currency, -C.AmountF As AmountF, convert(C.exchange_rate, sql_float) as ExchRate from v_gl_ap_check_dtl A Inner Join (Select Batch, Post_Date_Sql from V_GL_Detail Group by Batch,Post_Date_Sql) B on A.Batch = B.Batch and Cast(A.Post_Date_sql as Date) = Cast(B.Post_Date_sql as Date) left join (select batch_num as Batch, vendor, date_check, check_num, exchange_curr, exchange_rate, sum(amt_transaction) as amount, sum(exchange_amt) as AmountF from v_ap_open_items where gl_Account = '{0}' and date_batch between '{1}' and '{2}' and vendor <> '' group by Batch_num, date_check, check_num, vendor, exchange_curr, exchange_rate union all select batch_num as Batch, vendor, date_check, check_num, exchange_curr, exchange_rate, sum(amt_transaction) as amount, sum(exchange_amt) as AmountF from v_ap_hist where gl_Account = '{0}' and date_batch between '{1}' and '{2}' and vendor <> '' group by Batch_num, date_check, check_num, vendor, exchange_curr, exchange_rate)C On A.Batch = C.Batch Left Join v_vendor_master D on C.vendor = D.vendor where Left(A.Batch,1) = 'A' and gl_number = '{0}' and A.post_date_sql between '{1}' and '{2}' order by batch, A.post_Date_sql, line",V.Local.sAccount.Trim,V.Local.dStart.PervasiveDate,V.Local.dEnd.PervasiveDate,V.Global.sCoCurrency.Trim,V.Local.sSQL)
	F.Intrinsic.String.Build("select A.batch+convert(A.line,sql_char) as BATCHLINE, A.batch as BATCH, A.post_Date_sql as POSTDATE, Cast('1900-01-01' as DATE) as INVCDATE, Cast('1900-01-01' as DATE) as CHECKDATE, '' as CHECKNUM, A.line as LINE, '' as VENDCUST, '' as DESCRIPTION, ' ' as REFERENCE, '' as JEREF, '' as INVCNOTE, CONVERT(0,SQL_float) as AMOUNT, invoice_no as INVOICE, '' as CURRENCY, CONVERT(0, SQL_FLOAT) As AMOUNTF, convert(0, sql_float) as EXCHRATE from v_gl_ap_check_dtl A Inner Join (Select Batch, Post_Date_Sql from V_GL_Detail Group by Batch,Post_Date_Sql) B on A.Batch = B.Batch and Cast(A.Post_Date_sql as Date) = Cast(B.Post_Date_sql as Date) where (Left(A.Batch,1) = 'A' or Left(A.Batch,1) = 'K') and gl_number = '{0}' and A.post_date_sql between '{1}' and '{2}' order by batch, A.post_Date_sql, line",V.Local.sAccount.Trim,V.Local.dStart.PervasiveDate,V.Local.dEnd.PervasiveDate,V.Global.sCoCurrency.Trim,V.Local.sSQL)
	F.Data.DataTable.CreateFromSQL("dtCheckTemp1","conx",V.Local.sSQL,True)
	
'	F.Intrinsic.String.Build("select batch_num as BATCH, vendor as VENDCUST, date_check as CHECKDATE, check_num as CHECKNUM, IF(Exchange_curr<>'',Exchange_curr,'USD') as CURRENCY, convert(exchange_rate, sql_float) as EXCHRATE, sum(convert(-B.Check_Net_Cmpny,sql_float)) as AMOUNT, sum(convert(-B.Check_Net_Vend,sql_float)) as AMOUNTF from v_ap_open_items A Left Join (Select Batch, rtrim(Check_Number) as check_number, Check_Net_Cmpny, Check_Net_Vend From V_GL_AP_Check_DTL Where Post_Date_SQL <= '{2}' and Check_Number <> '')B on A.batch_num = B.Batch and Rtrim(A.check_num) = B.Check_Number where A.gl_account = '{0}' AND A.date_batch <= '{2}' group by Batch, VENDCUST, CHECKDATE, CHECKNUM, CURRENCY, exchange_rate union all select batch_num as Batch, vendor as VENDCUST, date_check as CHECKDATE, check_num as CHECKNUM, IF(Exchange_curr<>'',Exchange_curr,'USD') as CURRENCY, convert(exchange_rate, sql_float) as EXCHRATE, sum(convert(-B.Check_Net_Cmpny,sql_float)) as AMOUNT, sum(convert(-B.Check_Net_Vend,sql_float)) as AMOUNTF from v_ap_hist A Left Join (Select Batch, rtrim(Check_Number) as check_number, Check_Net_Cmpny, Check_Net_Vend From V_GL_AP_Check_DTL Where Post_Date_SQL <= '{2}' and Check_Number <> '')B on A.batch_num = B.Batch and Rtrim(A.check_num) = Rtrim(B.check_number) where A.gl_account = '{0}' AND A.date_batch <= '{2}' group by Batch, VENDCUST, CHECKDATE, CHECKNUM, CURRENCY, exchange_rate;",V.Local.sAccount.Trim,V.Local.dStart.PervasiveDate,V.Local.dEnd.PervasiveDate,V.Global.sCoCurrency.Trim,V.Local.sSQL)
	F.Intrinsic.String.Build("select A.BATCH, A.VENDCUST, A.BI, A.CHECKDATE, A.CHECKNUM, A.CURRENCY, A.EXCHRATE, sum(convert(-B.Amount_Cmpny,sql_float)) as AMOUNT, sum(convert(-B.Check_Net_Vend,sql_float)) as AMOUNTF from (SELECT batch_num as BATCH, vendor as VENDCUST, LTRIM(RTRIM(BATCH_NUM))+LTRIM(RTRIM(VENDOR)) AS BI, date_check as CHECKDATE, check_num as CHECKNUM, IF(Exchange_curr<>'',Exchange_curr,'USD') as CURRENCY, convert(exchange_rate, sql_float) as EXCHRATE FROM v_ap_open_items where gl_account = '{0}' AND date_batch between '{1}' and '{2}' group by Batch, VENDCUST, BI, CHECKDATE, CHECKNUM, CURRENCY, exchrate) A Left Join (Select Batch, rtrim(Check_Number) as check_number, if(Check_Disc_Cmpny<>0,Check_Net_Cmpny,Amount_Cmpny) as Amount_Cmpny, Check_Net_Vend From V_GL_AP_Check_DTL Where Post_Date_SQL between '{1}' and '{2}' and Check_Number <> '')B on A.batch = B.Batch and Rtrim(A.checknum) = B.Check_Number group by A.Batch, A.VENDCUST, A.BI, A.CHECKDATE, A.CHECKNUM, A.CURRENCY, A.exchrate union all select A.BATCH, A.VENDCUST, A.BI, A.CHECKDATE, A.CHECKNUM, A.CURRENCY, A.EXCHRATE, sum(convert(-B.Amount_Cmpny,sql_float)) as AMOUNT, sum(convert(-B.Check_Net_Vend,sql_float)) as AMOUNTF from (SELECT batch_num as BATCH, vendor as VENDCUST, LTRIM(RTRIM(BATCH_NUM))+LTRIM(RTRIM(VENDOR)) AS BI, date_check as CHECKDATE, check_num as CHECKNUM, IF(Exchange_curr<>'',Exchange_curr,'USD') as CURRENCY, convert(exchange_rate, sql_float) as EXCHRATE FROM v_ap_hist where gl_account = '{0}' AND date_batch between '{1}' and '{2}' group by Batch, VENDCUST, BI, CHECKDATE, CHECKNUM, CURRENCY, exchrate) A Left Join (Select Batch, rtrim(Check_Number) as check_number, if(Check_Disc_Cmpny<>0,Check_Net_Cmpny,Amount_Cmpny) as Amount_Cmpny, Check_Net_Vend From V_GL_AP_Check_DTL Where Post_Date_SQL between '{1}' and '{2}' and Check_Number <> '')B on A.batch = B.Batch and Rtrim(A.checknum) = Rtrim(B.check_number) group by A.Batch, A.VENDCUST, A.BI, A.CHECKDATE, A.CHECKNUM, A.CURRENCY, A.exchrate;", V.Local.sAccount.Trim, V.Local.dStart.PervasiveDate, V.Local.dEnd.PervasiveDate, V.Global.sCoCurrency.Trim, V.Local.sSQL)
	F.Data.DataTable.CreateFromSQL("dtCheckTemp2","conx",V.Local.sSQL,True)
	
	F.Data.Linq.Join("Leftjoin","datatable","dtCheckTemp1*!*A","datatable","dtCheckTemp2*!*B","A.Batch=B.Batch","A.BATCHLINE*!*B.BI*!*A.BATCH*!*A.POSTDATE*!*A.INVCDATE*!*B.CHECKDATE*!*B.CHECKNUM*!*B.VENDCUST*!*A.Line*!*A.DESCRIPTION*!*A.REFERENCE*!*A.JEREF*!*A.INVCNOTE*!*B.AMOUNT*!*A.INVOICE*!*B.CURRENCY*!*B.AMOUNTF*!*B.EXCHRATE", "A.Batch,A.POSTDATE", "","","dTCheck",True)
	F.Data.DataTable.Close("dtCheckTemp1")
	F.Data.DataTable.Close("dtCheckTemp2")
	
	F.Data.Dictionary.CreateFromSQL("dic","conx","select Vendor, Name_Vendor from V_Vendor_Master;")
	F.Data.Dictionary.SetDefaultReturn("dic","")
	F.Data.DataTable.FillFromDictionary("dtCheck","dic","VENDCUST","DESCRIPTION")
	F.Data.Dictionary.Close("dic")
	
F.Intrinsic.Control.Else
	F.Intrinsic.String.Build("select A.batch+convert(A.line,sql_char) as BATCHLINE, LTRIM(RTRIM(A.Batch))+LTRIM(RTRIM(C.Cust_Vendor)) as BI, A.batch as BATCH, A.post_Date_sql as POSTDATE, Cast(A.Invc_Date_SQL as DATE) as INVCDATE, cast(A.Check_Date_SQL as Date) as CHECKDATE, A.Check_Number as CHECKNUM, A.Cust_Vendor as VENDCUST, A.line as LINE, name_vendor as DESCRIPTION, ' ' as REFERENCE, '' as JEREF, '' as INVCNOTE, convert(amount_cmpny, sql_float) as AMOUNT, invoice_no as INVOICE,A.exch_vend_curr as CURRENCY, convert(if(Exch_Vend_Rate<>0,A.CHECK_NET_VEND,0), sql_float) as AMOUNTF,convert(Exch_Vend_Rate, sql_float) as EXCHRATE from v_gl_ap_check_dtl A Inner Join (Select Batch, Post_Date_Sql from V_GL_Detail Group by Batch,Post_Date_Sql) B on A.Batch = B.Batch and Cast(A.Post_Date_sql as Date) = Cast(B.Post_Date_sql as Date) left join (select batch as Batch, cust_vendor from v_gl_ap_check_dtl where post_date_sql between '{1}' and '{2}' and cust_vendor <> '' group by Batch, cust_vendor)C On A.Batch = C.Batch and A.Cust_Vendor = C.Cust_Vendor Left Join v_vendor_master D on C.cust_vendor = D.vendor where (Left(A.Batch,1) = 'A' or Left(A.Batch,1) = 'K') and gl_number = '{0}' and A.post_date_sql between '{1}' and '{2}' order by batch, A.post_Date_sql, line",V.Local.sAccount.Trim,V.Local.dStart.PervasiveDate,V.Local.dEnd.PervasiveDate,V.Local.sSQL)
	F.Data.DataTable.CreateFromSQL("dtCheck","conx",V.Local.sSQL,True)
F.Intrinsic.Control.EndIf
F.ODBC.conx!rst.Close
F.Data.DataTable.AddColumn("dtCheck","Mode","String","AP Check")

'F.Data.Dictionary.CreateFromSQL("dic","conx","select LTRIM(RTRIM(Batch))+LTRIM(RTRIM(Cust_Vendor)), Invc_Date_Sql from V_GL_AP_CHECK_DTL where INVC_DATE <> '00000000';")
'F.Data.Dictionary.SetDefaultReturn("dic",V.Ambient.Date)
'F.Data.DataTable.FillFromDictionary("dtCheck","dic","BI","INVCDATE")
'F.Data.Dictionary.Close("dic")

'F.Data.Dictionary.CreateFromSQL("dic","conx","select Batch+Cust_Vendor, Check_Number from V_GL_AP_CHECK_DTL where INVC_DATE <> '00000000';")
'F.Data.Dictionary.SetDefaultReturn("dic","")
'F.Data.DataTable.FillFromDictionary("dtCheck","dic","BI","CHECKNUM")
'F.Data.Dictionary.Close("dic")

F.Data.Dictionary.CreateFromSQL("dic","conx","select LTRIM(RTRIM(Batch))+LTRIM(RTRIM(Cust_Vendor)), Check_Date_Sql from V_GL_AP_CHECK_DTL where INVC_DATE <> '00000000';")
F.Data.Dictionary.SetDefaultReturn("dic",V.Ambient.Date)
F.Data.DataTable.FillFromDictionary("dtCheck","dic","BI","CHECKDATE")
F.Data.Dictionary.Close("dic")

F.Data.DataTable.Merge("dtCheck","dtGL",True,1)
F.Data.DataTable.Close("dtCheck")

'AR Check
F.Intrinsic.String.Build("select gl_cash_acct as Account, exch_curr as CURRENCY, bank_desc as BankDesc from v_cash_account where gl_cash_acct = '{0}'",V.Local.sAccount.Trim,V.Local.sSQL)
F.ODBC.Connection!conx.OpenLocalRecordsetRO("rst",V.Local.sSQL)
F.Intrinsic.Control.If(V.ODBC.conx!rst.EOF,=,False)
V.Local.bCheck.Set(True)
	F.Intrinsic.String.Build("select A.batch+convert(A.line,sql_char) as BATCHLINE, LTRIM(RTRIM(A.Batch))+LTRIM(RTRIM(C.Customer)) as BI, A.batch as BATCH, A.post_Date_sql as POSTDATE, Cast('1900-01-01' as DATE) as INVCDATE, C.date_retain as CHECKDATE, C.Refund_Ck_No as CHECKNUM, A.line as LINE, C.Customer as VENDCUST, name_customer as DESCRIPTION, ' ' as REFERENCE, '' as JEREF, '' as INVCNOTE, convert(-c.Amount, sql_float) as AMOUNT, invoice_no as INVOICE, IF(C.Exchange_curr<>'',C.Exchange_curr,'{3}') as CURRENCY, convert(-C.AMOUNTF, sql_float) As AMOUNTF, convert(C.exchange_rate, sql_float) as EXCHRATE from v_gl_ap_check_dtl A Inner Join (Select Batch, Post_Date_Sql from V_GL_Detail Group by Batch,Post_Date_Sql) B on A.Batch = B.Batch and Cast(A.Post_Date_sql as Date) = Cast(B.Post_Date_sql as Date) left join (select batch_num as Batch, customer, date_retain, Refund_Ck_No, exchange_curr, exchange_rate, sum(amt_invoice) as amount, if(exchange_rate<>0,sum(exchange_amt),0) as AMOUNTF from v_ar_open_items where batch_code = '11' and date_transaction between '{1}' and '{2}' and customer <> '' group by Batch_num, date_retain, Refund_Ck_No, customer, exchange_curr, exchange_rate union all select batch_num as Batch, customer, date_retain, Refund_Ck_No, exchange_curr, exchange_rate, sum(amt_invoice) as amount, if(exchange_rate<>0,sum(exchange_amt),0) as AMOUNTF from v_ar_history where batch_code = '11' and date_transaction between '{1}' and '{2}' and customer <> '' group by Batch_num, date_retain, Refund_Ck_No, customer, exchange_curr, exchange_rate)C On A.Batch = C.Batch Left Join v_customer_master D on C.customer = D.customer where Left(A.Batch,1) = 'R' and gl_number = '{0}' and A.post_date_sql between '{1}' and '{2}' order by batch, A.post_Date_sql, line",V.Local.sAccount.Trim,V.Local.dStart.PervasiveDate,V.Local.dEnd.PervasiveDate,V.Global.sCoCurrency.Trim,V.Local.sSQL)
F.Intrinsic.Control.Else
	F.Intrinsic.String.Build("select A.batch+convert(A.line,sql_char) as BATCHLINE, LTRIM(RTRIM(A.Batch))+LTRIM(RTRIM(A.Cust_Vendor)) as BI, A.batch as BATCH, A.post_Date_sql as POSTDATE, Cast(A.Invc_Date_SQL as DATE) as INVCDATE, cast(A.Check_Date_SQL as Date) as CHECKDATE, A.Check_Number as CHECKNUM, A.Cust_Vendor as VENDCUST, A.line as LINE, name_customer as DESCRIPTION, ' ' as REFERENCE, '' as JEREF, '' as INVCNOTE, convert(amount_cmpny,sql_float) as AMOUNT, invoice_no as INVOICE,A.exch_vend_curr as CURRENCY, convert(A.CHECK_NET_VEND, sql_float) as AMOUNTF,convert(Exch_Vend_Rate, sql_float) as EXCHRATE from v_gl_ap_check_dtl A Inner Join (Select Batch, Post_Date_Sql from V_GL_Detail Group by Batch,Post_Date_Sql) B on A.Batch = B.Batch and Cast(A.Post_Date_sql as Date) = Cast(B.Post_Date_sql as Date) left join (select batch as Batch, cust_vendor from v_gl_ap_check_dtl where post_date_sql between '{1}' and '{2}' and cust_vendor <> '' group by Batch, cust_vendor)C On A.Batch = C.Batch and A.Cust_Vendor = C.Cust_Vendor Left Join v_customer_master D on C.cust_vendor = D.customer where Left(A.Batch,1) = 'R' and gl_number = '{0}' and A.post_date_sql between '{1}' and '{2}' order by batch, A.post_Date_sql, line",V.Local.sAccount.Trim,V.Local.dStart.PervasiveDate,V.Local.dEnd.PervasiveDate,V.Local.sSQL)
F.Intrinsic.Control.EndIf
F.ODBC.conx!rst.Close
F.Data.DataTable.CreateFromSQL("dtARCheck","conx",V.Local.sSQL,True)
F.Data.DataTable.AddColumn("dtARCheck","Mode","String","AR Check")

'F.Data.Dictionary.CreateFromSQL("dic","conx","select LTRIM(RTRIM(Batch))+LTRIM(RTRIM(Cust_Vendor)), Invc_Date_Sql from V_GL_AP_CHECK_DTL where INVC_DATE <> '00000000';")
'F.Data.Dictionary.SetDefaultReturn("dic",V.Ambient.Date)
'F.Data.DataTable.FillFromDictionary("dtARCheck","dic","BI","INVCDATE")
'F.Data.Dictionary.Close("dic")

'F.Data.Dictionary.CreateFromSQL("dic","conx","select Batch+Cust_Vendor, Check_Number from V_GL_AP_CHECK_DTL where INVC_DATE <> '00000000';")
'F.Data.Dictionary.SetDefaultReturn("dic","")
'F.Data.DataTable.FillFromDictionary("dtARCheck","dic","BI","CHECKNUM")
'F.Data.Dictionary.Close("dic")

F.Data.Dictionary.CreateFromSQL("dic","conx","select LTRIM(RTRIM(Batch))+LTRIM(RTRIM(Cust_Vendor)), Check_Date_Sql from V_GL_AP_CHECK_DTL where INVC_DATE <> '00000000';")
F.Data.Dictionary.SetDefaultReturn("dic",V.Ambient.Date)
F.Data.DataTable.FillFromDictionary("dtARCheck","dic","BI","CHECKDATE")
F.Data.Dictionary.Close("dic")

F.Data.DataTable.Merge("dtARCheck","dtGL",True,1)
F.Data.DataTable.Close("dtARCheck")

'AR
F.Intrinsic.String.Build("select batch+convert(line,sql_char) as BATCHLINE, '' as BI, batch as BATCH, post_Date_sql as POSTDATE, invc_date_sql as INVCDATE, Cast('1900-01-01' as DATE) as CHECKDATE, '' as CHECKNUM, line as LINE, Cust as VENDCUST,  cust_name as DESCRIPTION, Refn as REFERENCE, '' as JEREF, '' as INVCNOTE, convert(amount_cmpny, sql_float) as AMOUNT, invoice_no as INVOICE, exch_oe_curr as CURRENCY, convert(amount_oe, sql_float) as AMOUNTF, convert(Exch_OE_Rate, sql_float) as EXCHRATE from v_gl_ar_detail where gl_number = '{0}' and post_date_sql between '{1}' and '{2}' order by batch, post_Date_sql, line",V.Local.sAccount.Trim,V.Local.dStart.PervasiveDate,V.Local.dEnd.PervasiveDate,V.Local.sSQL)
F.Data.DataTable.CreateFromSQL("dtAR","conx",V.Local.sSQL,True)
F.Data.DataTable.AddColumn("dtAR","Mode","String","AR")
F.Data.DataTable.Merge("dtAR","dtGL",True,1)
F.Data.DataTable.Close("dtAR")

F.Data.DataView.Create("dtGL","dvGL",22,"","POSTDATE ASC")
F.Data.DataView.ToDataTable("dtGL","dvGL","dtTemp",True)
F.Data.DataView.Close("dtGL","dvGL")
F.Data.DataTable.Close("dtGL")

F.Data.DataTable.Clone("dtTemp","dtDetail",True)

V.Local.sAccountDesc.Set(V.Screen.F_ViewGL!txtAccountDesc.Text)

'Get beginning balance until the selected date
'Get financial year info
F.Intrinsic.String.Format(V.Local.dStart,"MM/DD/YY",V.Local.sFormattedDate)
F.Intrinsic.String.Build("Beginning <= #{0}# AND Ending >= #{0}#",V.Local.sFormattedDate,V.Local.sFilter)
F.Data.DataTable.Select("dtCalendar",V.Local.sFilter,V.Local.sRet)
V.Local.iYear.Set(V.DataTable.dtCalendar(V.Local.sRet).FYR!FieldVal)
V.Local.dBegBeg.Set(V.DataTable.dtCalendar(V.Local.sRet).Beginning!FieldVal)

'Get beginning balance of the year
F.Intrinsic.String.Build("select beg_bal from v_gl_balances where fiscal_yr = '{0}' and acct = '{1}'",V.Local.iYear,V.Local.sAccount.Trim,V.Local.sSQL)
F.ODBC.Connection!conx.ExecuteandReturn(V.Local.sSQL,V.Local.fBegBal)
F.Intrinsic.Math.Add(V.Local.fBegBal,0,V.Local.fBegBal)

'Get the sum of all transactions posted between year start date and selected start date
F.Intrinsic.Date.DateAdd("D",-1,V.Local.dStart,V.Local.dBegEnd)
F.Intrinsic.String.Build("select sum(amount_cmpny) from v_gl_detail where gl_number = '{0}' and post_date_sql between '{1}' and '{2}'",V.Local.sAccount.Trim,V.DataTable.dtCalendar(V.Local.sRet).Beginning!FieldValPervasiveDate,V.Local.dBegEnd.PervasiveDate,V.Local.sSQL)
F.ODBC.Connection!conx.ExecuteandReturn(V.Local.sSQL,V.Local.fAmtPosted)
F.Intrinsic.Math.Add(V.Local.fAmtPosted,0,V.Local.fAmtPosted)
F.Intrinsic.Math.Add(V.Local.fBegBal,V.Local.fAmtPosted,V.Local.fBegBal)

F.Data.DataTable.AddRow("dtDetail","POSTDATE",V.Local.dStart,"DESCRIPTION","Beginning Balance:","REFERENCE",V.Local.sAccountDesc.Trim,"AMOUNT",V.Local.fBegBal,"Mode","")

'Get the sum of all transactions posted between start date and end date
F.Intrinsic.Control.If(V.DataTable.dtDetail.RowCount,=,0)
	V.Local.fAmtPosted.Set(0)
F.Intrinsic.Control.Else
	F.Data.DataTable.Compute("dtTemp","SUM(Amount)","",V.Local.fAmtPosted)
F.Intrinsic.Control.EndIf
F.Intrinsic.Math.Add(V.Local.fBegBal,V.Local.fAmtPosted,V.Local.fEndBal)

F.Data.DataTable.Merge("dtTemp","dtDetail",True,1)
F.Data.DataTable.Close("dtTemp")
F.Data.DataTable.AcceptChanges("dtDetail")
	
'Add ending balance to dtDetail
F.Data.DataTable.AddRow("dtDetail","POSTDATE",V.Local.dEnd,"DESCRIPTION","Ending Balance:","REFERENCE",V.Local.sAccountDesc.Trim,"Amount",V.Local.fEndBal,"Mode","")

'F.Data.DataTable.AddExpressionColumn("dtDetail","BatchLine","String","Batch+Line")
'//F.Data.DataTable.AddColumn("dtDetail","Currency","String")
'//	F.Data.DataTable.AddColumn("dtDetail","AmountF","Float")
'F.Data.DataTable.AddExpressionColumn("dtDetail","ExchRate","Float","IIF(AmountF<>0,Amount/AmountF,0)")
'//F.Data.DataTable.AddColumn("dtDetail","ExchRate","Float")
'F.Data.DataTable.AddColumn("dtDetail","Invoice","String")
'F.Data.DataTable.AddColumn("dtDetail","Mode","String")

'Update batch info in foreign currency if exists
'//F.Intrinsic.String.Build("select batch+convert(line,sql_char) as BatchLine, exch_vend_curr as Currency, amount_vend as Amount, invoice_no as Invoice, invc_date_sql as InvoiceDate, Exch_Vend_Rate as ExchRate from v_gl_ap_detail where gl_number = '{0}' and post_date_sql between '{1}' and '{2}' and exch_vend_curr <> '' and exch_vend_curr <> '{3}'",V.Local.sAccount.Trim,V.Local.dStart.PervasiveDate,V.Local.dEnd.PervasiveDate,V.Global.sCoCurrency.Trim,V.Local.sSQL)
'//F.Data.DataTable.CreateFromSQL("dtFDetail","conx",V.Local.sSQL,True)
'//F.Data.DataTable.AddColumn("dtFDetail","Mode","String","AP")

'F.Intrinsic.String.Build("select A.batch+convert(A.line,sql_char) as BatchLine, A.exch_vend_curr as Currency, A.amount_vend as Amount, invoice_no as Invoice, invc_date_sql as InvoiceDate from v_gl_ap_check_dtl A where gl_number = '{0}' and post_date_sql between '{1}' and '{2}' and exch_vend_curr <> '' and exch_vend_curr <> '{3}'",V.Local.sAccount.Trim,V.Local.dStart.PervasiveDate,V.Local.dEnd.PervasiveDate,V.Global.sCoCurrency.Trim,V.Local.sSQL)
'F.Intrinsic.String.Build("select A.batch+convert(A.line,sql_char) as BatchLine, IF(B.EXCH_VEND_CURR<>'',B.EXCH_VEND_CURR,'USD') as Currency, IF(B.AMOUNT<>'',-B.AMOUNT,0) as Amount, A.invoice_No as Invoice, A.Invc_Date_SQL as InvoiceDate from v_gl_ap_check_dtl A Left Join (select A.BATCH, A.EXCH_VEND_CURR, SUM(A.AMOUNT_VEND) AS AMOUNT from v_gl_ap_check_dtl A WHERE A.EXCH_VEND_CURR <> '' AND A.EXCH_VEND_CURR <> '{3}' GROUP BY A.BATCH, A.EXCH_VEND_CURR) B On A.Batch = B.Batch where A.gl_number = '{0}' AND A.post_date_sql between '{1}' and '{2}'",V.Local.sAccount.Trim,V.Local.dStart.PervasiveDate,V.Local.dEnd.PervasiveDate,V.Global.sCoCurrency.Trim,V.Local.sSQL)
'//F.Intrinsic.Control.If(V.Local.bCheck,=,True)
'	F.Intrinsic.String.Build("select A.batch+convert(A.line,sql_char) as BatchLine, IF(B.EXCH_VEND_CURR<>'',B.EXCH_VEND_CURR,'{3}') as Currency, IF(B.AMOUNT<>'',-B.AMOUNT,0) as Amount, A.invoice_No as Invoice, A.Invc_Date_SQL as InvoiceDate, B.Exch_Vend_Rate as ExchRate from v_gl_ap_check_dtl A Left Join (select A.BATCH, A.EXCH_VEND_CURR, A.Exch_Vend_Rate, SUM(A.CHECK_NET_VEND) AS AMOUNT from v_gl_ap_check_dtl A WHERE A.EXCH_VEND_CURR <> '' AND A.EXCH_VEND_CURR <> '{3}' GROUP BY A.BATCH, A.EXCH_VEND_CURR, A.Exch_Vend_Rate) B On A.Batch = B.Batch where A.gl_number = '{0}' AND A.post_date_sql between '{1}' and '{2}'",V.Local.sAccount.Trim,V.Local.dStart.PervasiveDate,V.Local.dEnd.PervasiveDate,V.Global.sCoCurrency.Trim,V.Local.sSQL)
'	F.Intrinsic.String.Build("select A.batch+convert(A.line,sql_char) as BatchLine, IF(B.Exchange_curr<>'',B.Exchange_curr,'{3}') as Currency, IF(B.AMOUNT<>'',-B.AMOUNT,0) as Amount, A.invoice_No as Invoice, A.Invc_Date_SQL as InvoiceDate, B.exchange_rate as ExchRate from v_gl_ap_check_dtl A Left Join (select batch_num as Batch, vendor,Exchange_Curr, exchange_rate, sum(exchange_amt) as amount from v_ap_open_items where gl_Account = '{0}' and date_batch between '{1}' and '{2}' and vendor <> '' group by Batch_num, vendor,Exchange_Curr, Exchange_Rate) B On A.Batch = B.Batch where A.gl_number = '{0}' AND A.post_date_sql between '{1}' and '{2}'",V.Local.sAccount.Trim,V.Local.dStart.PervasiveDate,V.Local.dEnd.PervasiveDate,V.Global.sCoCurrency.Trim,V.Local.sSQL)
'F.Intrinsic.Debug.ShowCallerInfo
'//	F.Intrinsic.String.Build("select A.batch+convert(A.line,sql_char) as BatchLine, IF(C.Exchange_curr<>'',C.Exchange_curr,'{3}') as Currency, -c.Amount as Amount, invoice_no as Invoice, A.Invc_Date_SQL as InvoiceDate, C.exchange_rate as ExchRate from v_gl_ap_check_dtl A Inner Join (Select Batch, Post_Date_Sql from V_GL_Detail Group by Batch,Post_Date_Sql) B on A.Batch = B.Batch and Cast(A.Post_Date_sql as Date) = Cast(B.Post_Date_sql as Date) left join (select batch_num as Batch, vendor, Exchange_Curr, Exchange_Rate, sum(Exchange_Amt) as amount from v_ap_open_items where gl_Account = '{0}' and date_batch between '{1}' and '{2}' and vendor <> '' group by Batch_num, vendor, Exchange_Curr, Exchange_Rate)C On A.Batch = C.Batch Left Join v_vendor_master D on C.vendor = D.vendor where gl_number = '{0}' and A.post_date_sql between '{1}' and '{2}' order by A.batch, A.post_Date_sql, A.line",V.Local.sAccount.Trim,V.Local.dStart.PervasiveDate,V.Local.dEnd.PervasiveDate,V.Local.sSQL)
'//F.Intrinsic.Control.Else
'//	F.Intrinsic.String.Build("select A.batch+convert(A.line,sql_char) as BatchLine, A.exch_vend_curr as Currency, A.CHECK_NET_VEND as Amount, invoice_no as Invoice, invc_date_sql as InvoiceDate, Exch_Vend_Rate as ExchRate from v_gl_ap_check_dtl A where gl_number = '{0}' and post_date_sql between '{1}' and '{2}' and exch_vend_curr <> '' and exch_vend_curr <> '{3}'",V.Local.sAccount.Trim,V.Local.dStart.PervasiveDate,V.Local.dEnd.PervasiveDate,V.Global.sCoCurrency.Trim,V.Local.sSQL)
'//F.Intrinsic.Control.EndIf
'F.Intrinsic.String.Build("select A.batch+convert(A.line,sql_char) as BatchLine, IF(A.PAYMENT_CURR<>'',A.PAYMENT_CURR,'{3}') as Currency, IF(B.AMOUNT<>'',-B.AMOUNT,0) as Amount, A.invoice_No as Invoice, A.Invc_Date_SQL as InvoiceDate from v_gl_ap_check_dtl A Left Join (select A.BATCH, A.EXCH_VEND_CURR, SUM(A.CHECK_NET_VEND) AS AMOUNT from v_gl_ap_check_dtl A WHERE A.EXCH_VEND_CURR <> '' AND A.EXCH_VEND_CURR <> '{3}' GROUP BY A.BATCH, A.EXCH_VEND_CURR) B On A.Batch = B.Batch where A.gl_number = '{0}' AND A.post_date_sql between '{1}' and '{2}'",V.Local.sAccount.Trim,V.Local.dStart.PervasiveDate,V.Local.dEnd.PervasiveDate,V.Global.sCoCurrency.Trim,V.Local.sSQL)
'//F.Data.DataTable.CreateFromSQL("dtCheck","conx",V.Local.sSQL,True)
'//F.Data.DataTable.AddColumn("dtCheck","Mode","String","AP Check")
'//F.Data.DataTable.Merge("dtCheck","dtFDetail",True,1)
'//F.Data.DataTable.Close("dtCheck")

'//F.Intrinsic.String.Build("select batch+convert(line,sql_char) as BatchLine,exch_oe_curr as Currency, amount_oe as Amount, invoice_no as Invoice, invc_date_sql as InvoiceDate, Exch_OE_Rate as ExchRate from v_gl_ar_detail where gl_number = '{0}' and post_date_sql between '{1}' and '{2}' and exch_oe_curr <> '' and exch_oe_curr <> '{3}'",V.Local.sAccount.Trim,V.Local.dStart.PervasiveDate,V.Local.dEnd.PervasiveDate,V.Global.sCoCurrency.Trim,V.Local.sSQL)
'//F.Data.DataTable.CreateFromSQL("dtAR","conx",V.Local.sSQL,True)
'//F.Data.DataTable.AddColumn("dtAR","Mode","String","AR")
'//F.Data.DataTable.Merge("dtAR","dtFDetail",True,1)
'//F.Data.DataTable.Close("dtAR")

'//F.Intrinsic.String.Build("select batch+convert(line,sql_char) as BatchLine,exchange_curr as Currency, convert(amount_forex,sql_numeric) as Amount, '' as Invoice, Cast('1900-01-01' as Date) as InvoiceDate, Cast(Exchange_Rate as Numeric(10,5)) as ExchRate from GAB_5060_BATCH_DTL where  post_date_sql between '{0}' and '{1}'",V.Local.dStart.PervasiveDate,V.Local.dEnd.PervasiveDate,V.Local.sSQL)
'//F.Data.DataTable.CreateFromSQL("dtGLF","conx",V.Local.sSQL,True)
'F.Data.DataTable.AddColumn("dtGLF","Invoice","String")
'F.Data.DataTable.AddColumn("dtGLF","InvoiceDate","Date")
'//F.Data.DataTable.AddColumn("dtGLF","Mode","String","")
'//F.Data.DataTable.Merge("dtGLF","dtFDetail",True,1)
'//F.Data.DataTable.Close("dtGLF")

'//F.Data.Dictionary.CreateFromDataTable("dicAP","dtFDetail","BatchLine","Currency")
'//F.Data.Dictionary.SetDefaultReturn("dicAP",V.Global.sCoCurrency.Trim)
'//F.Data.DataTable.FillFromDictionary("dtDetail","dicAP","BatchLine","Currency")
'//F.Data.Dictionary.Close("dicAP")
'//F.Data.Dictionary.CreateFromDataTable("dicAP","dtFDetail","BatchLine","Amount")
'//F.Data.Dictionary.SetDefaultReturn("dicAP","0")
'//F.Data.DataTable.FillFromDictionary("dtDetail","dicAP","BatchLine","AmountF")
'//F.Data.Dictionary.Close("dicAP")
'//	F.Data.Dictionary.CreateFromDataTable("dicAP","dtFDetail","BatchLine","ExchRate")
'//	F.Data.Dictionary.SetDefaultReturn("dicAP","0")
'//	F.Data.DataTable.FillFromDictionary("dtDetail","dicAP","BatchLine","ExchRate")
'//	F.Data.Dictionary.Close("dicAP")
'F.Data.Dictionary.CreateFromDataTable("dicAP","dtFDetail","BatchLine","Invoice")
'F.Data.Dictionary.SetDefaultReturn("dicAP","")
'F.Data.DataTable.FillFromDictionary("dtDetail","dicAP","BatchLine","Invoice")
'F.Data.Dictionary.Close("dicAP")
'F.Data.Dictionary.CreateFromDataTable("dicAP","dtFDetail","BatchLine","Mode")
'F.Data.Dictionary.SetDefaultReturn("dicAP","")
'F.Data.DataTable.FillFromDictionary("dtDetail","dicAP","BatchLine","Mode")
'F.Data.Dictionary.Close("dicAP")

'//F.Data.DataTable.Close("dtFDetail")

F.Intrinsic.Control.CallSub(GridViewSetup)

'Check if GL account is cash account
F.Intrinsic.String.Build("Account = '{0}'",V.Local.sAccount.Trim,V.Local.sFilter)
F.Data.DataTable.Select("dtCash",V.Local.sFilter,V.Local.sRet)
F.Intrinsic.Control.If(V.Local.sRet,<>,"***NORETURN***")
	'Cash account, add beginning balance and ending balance in foreign currency
	F.Intrinsic.String.Build("select beg_bal from GAB_5060_GL_BEG_BAL where gl_account = '{0}' and fiscal_yr = {1}",V.Local.sAccount.Trim,V.Local.iYear,V.Local.sSQL)
	F.ODBC.Connection!conx.ExecuteandReturn(V.Local.sSQL,V.Local.fBegBal)
	F.Intrinsic.Math.Add(V.Local.fBegBal,0,V.Local.fBegBal)

	'Get GL detail batch info for the selected year
	F.Intrinsic.String.Build("select batch as Batch, line as LINE, post_date_sql as Post_Date, convert(amount_cmpny, sql_float) as Amount from gl_journal_dtl where gl_number = '{0}' and post_date_sql between '{1}' and '{2}'",V.Local.sAccount.Trim,V.Local.dBegBeg.PervasiveDate,V.Local.dBegEnd.PervasiveDate,V.Local.sSQL)
	F.Data.DataTable.CreateFromSQL("dtGLDetail","conx",V.Local.sSQL,True)
	
	'Get custom GL detail batch info for the selected year
	F.Intrinsic.String.Build("select batch as Batch, line as LINE, post_date_sql as Post_Date, convert(amount_forex, sql_float) as Amount from GAB_5060_BATCH_DTL where post_date_sql between '{0}' and '{1}'",V.Local.dBegBeg.PervasiveDate,V.Local.dBegEnd.PervasiveDate,V.Local.sSQL)
	F.Data.DataTable.CreateFromSQL("dtGABDetail","conx",V.Local.sSQL,True)
	
	'User LINQ to get the two table join with the required info
	F.Data.Linq.Join("InnerJoin","datatable","dtGLDetail*!*GL","datatable","dtGABDetail*!*GAB","GL.Batch = GAB.Batch AND GL.Line = GAB.Line AND GL.Post_Date = GAB.Post_Date","GL.Batch*!*GL.Line*!*GAB.Amount","","","","dtDetailF",True)
'	F.Data.Linq.Join("LeftJoin","datatable","dtGLDetail*!*GL","datatable","dtGABDetail*!*GAB","GL.Batch = GAB.Batch AND GL.Line = GAB.Line","GL.Batch*!*GL.Line*!*GAB.Amount","","","","dtDetailF",True)
	F.Intrinsic.Control.If(V.DataTable.dtDetailF.RowCount,=,0)
		V.Local.fAmtPosted.Set(0)
	F.Intrinsic.Control.Else
		F.Data.DataTable.Compute("dtDetailF","SUM(Amount)","",V.Local.fAmtPosted)
	F.Intrinsic.Control.EndIf
	F.Data.DataTable.Close("dtGLDetail")
	F.Data.DataTable.Close("dtGABDetail")
	F.Data.DataTable.Close("dtDetailF")
	F.Intrinsic.Math.Add(V.Local.fBegBal,V.Local.fAmtPosted,V.Local.fBegBal)
	
	F.Intrinsic.String.Build("select batch as BATCH, line as LINE, convert(amount_vend, sql_float) as AMOUNT from v_gl_ap_detail where GL_number = '{0}' and post_date_sql between '{1}' and '{2}' union all select A.batch as Batch, A.line as LINE, convert(-B.Amount, sql_float) as Amount from v_gl_ap_check_dtl A left join (select batch as Batch, Sum(check_net_vend) as Amount from v_gl_ap_check_dtl where GL_number <> '{0}' and post_date_sql between '{1}' and '{2}' group by batch) B On Rtrim(A.Batch) = Rtrim(B.Batch) where GL_number = '{0}' and post_date_sql between '{1}' and '{2}' union all select batch as Batch, line as LINE, amount_oe as Amount from v_gl_ar_detail where GL_number = '{0}' and post_date_sql between '{1}' and '{2}'",V.Local.sAccount.Trim,V.Local.dBegBeg.PervasiveDate,V.Local.dBegEnd.PervasiveDate,V.Local.sSQL)
	F.Data.DataTable.CreateFromSQL("dtGLDetail","conx",V.Local.sSQL,True)
	F.Intrinsic.Control.If(V.DataTable.dtGLDetail.RowCount,=,0)
		V.Local.fAmtPosted.Set(0)
	F.Intrinsic.Control.Else
		F.Data.DataTable.Compute("dtGLDetail","SUM(Amount)","",V.Local.fAmtPosted)
	F.Intrinsic.Control.EndIf
	F.Data.DataTable.Close("dtGLDetail")
	F.Intrinsic.Math.Add(V.Local.fBegBal,V.Local.fAmtPosted,V.Local.fBegBal)
	
	'Get the sum of all forex transactions posted between start date and end date
	F.Intrinsic.Control.If(V.DataTable.dtDetail.RowCount,=,0)
		V.Local.fAmtPosted.Set(0)
	F.Intrinsic.Control.Else
		F.Data.DataTable.Compute("dtDetail","SUM(AmountF)","",V.Local.fAmtPosted)
	F.Intrinsic.Control.EndIf
		
	F.Intrinsic.String.Build("select gl_cash_acct as Account, exch_curr as Currency, bank_desc as BankDesc from v_cash_account where gl_cash_acct = '{0}'",V.Local.sAccount.Trim,V.Local.sSQL)
	F.ODBC.Connection!conx.OpenLocalRecordsetRO("rst",V.Local.sSQL)

	F.Intrinsic.Control.If(V.ODBC.conx!rst.EOF,=,False)
		F.Intrinsic.Control.If(V.Global.sCoCurrency,<>,V.ODBC.conx!rst.FieldVal!Currency)
			F.Data.DataTable.SetValue("dtDetail",0,"AmountF",V.Local.fBegBal,"Currency",V.ODBC.conx!rst.FieldVal!Currency,"Mode","")
			F.Intrinsic.Math.Add(V.Local.fBegBal,V.Local.fAmtPosted,V.Local.fEndBal)
			F.Data.DataTable.SetValue("dtDetail",V.DataTable.dtDetail.RowCount--,"AmountF",V.Local.fEndBal,"Currency",V.ODBC.conx!rst.FieldVal!Currency,"Mode","")
		F.Intrinsic.Control.Else
			F.Data.DataTable.SetValue("dtDetail",0,"Currency",V.ODBC.conx!rst.FieldVal!Currency,"Mode","")
			F.Data.DataTable.SetValue("dtDetail",V.DataTable.dtDetail.RowCount--,"Currency",V.ODBC.conx!rst.FieldVal!Currency,"Mode","")
		F.Intrinsic.Control.EndIf
	F.Intrinsic.Control.Else
		F.Data.DataTable.SetValue("dtDetail",0,"AmountF",V.Local.fBegBal,"Mode","")
		F.Intrinsic.Math.Add(V.Local.fBegBal,V.Local.fAmtPosted,V.Local.fEndBal)
		F.Data.DataTable.SetValue("dtDetail",V.DataTable.dtDetail.RowCount--,"AmountF",V.Local.fEndBal,"Mode","")
	F.Intrinsic.Control.EndIf
	
	F.ODBC.conx!rst.Close
F.Intrinsic.Control.EndIf

Gui.F_ViewGL.GsGCDetail.Visible(True)

F.Intrinsic.Control.Catch
	F.Intrinsic.String.Build("Project: {0}{1}{1}Subroutine: {2}{1}Error Occurred {3} with description {4}{1}{1}GAB Version: {5}",V.Ambient.ScriptPath,V.Ambient.Newline,V.Ambient.CurrentSubroutine,V.Ambient.ErrorNumber,V.Ambient.ErrorDescription,V.Ambient.GABVersion,V.Local.sError)
	F.Intrinsic.UI.Msgbox(V.Local.sError)
	F.Intrinsic.Control.End 
F.Intrinsic.Control.EndTry
Program.Sub.LoadTransaction.End

Program.Sub.GridViewSetup.Start
V.Local.sLabel.Declare
Gui.F_ViewGL.GsGCDetail.AddGridviewFromDatatable("gvGL","dtDetail")
Gui.F_ViewGL.GsGCDetail.MainView("gvGL")

Gui.F_ViewGL.GsGCDetail.SetGridviewProperty("gvGL","AllowSort",False)
Gui.F_ViewGL.GsGCDetail.SetGridviewProperty("gvGL","AllowFilter",False)

Gui.F_ViewGL.GsGCDetail.SetColumnProperty("gvGL","BatchLine","Visible",False)
Gui.F_ViewGL.GsGCDetail.SetColumnProperty("gvGL","BI","Visible",False)
'Gui.F_ViewGL.GsGCDetail.SetColumnProperty("gvGL","Amount1","Visible",False)
Gui.F_ViewGL.GsGCDetail.SetColumnProperty("gvGL","Batch","HeaderHAlignment","Center")
Gui.F_ViewGL.GsGCDetail.SetColumnProperty("gvGL","PostDate","HeaderHAlignment","Center")
Gui.F_ViewGL.GsGCDetail.SetColumnProperty("gvGL","Line","HeaderHAlignment","Center")
Gui.F_ViewGL.GsGCDetail.SetColumnProperty("gvGL","Description","HeaderHAlignment","Center")
Gui.F_ViewGL.GsGCDetail.SetColumnProperty("gvGL","Reference","HeaderHAlignment","Center")
Gui.F_ViewGL.GsGCDetail.SetColumnProperty("gvGL","Amount","HeaderHAlignment","Center")
Gui.F_ViewGL.GsGCDetail.SetColumnProperty("gvGL","Currency","HeaderHAlignment","Center")
Gui.F_ViewGL.GsGCDetail.SetColumnProperty("gvGL","ExchRate","HeaderHAlignment","Center")
Gui.F_ViewGL.GsGCDetail.SetColumnProperty("gvGL","AmountF","HeaderHAlignment","Center")
Gui.F_ViewGL.GsGCDetail.SetColumnProperty("gvGL","Invoice","HeaderHAlignment","Center")
Gui.F_ViewGL.GsGCDetail.SetColumnProperty("gvGL","InvcDate","HeaderHAlignment","Center")
Gui.F_ViewGL.GsGCDetail.SetColumnProperty("gvGL","CheckDate","HeaderHAlignment","Center")
Gui.F_ViewGL.GsGCDetail.SetColumnProperty("gvGL","VendCust","HeaderHAlignment","Center")
Gui.F_ViewGL.GsGCDetail.SetColumnProperty("gvGL","JERef","HeaderHAlignment","Center")
Gui.F_ViewGL.GsGCDetail.SetColumnProperty("gvGL","CheckNum","HeaderHAlignment","Center")
Gui.F_ViewGL.GsGCDetail.SetColumnProperty("gvGL","InvcNote","HeaderHAlignment","Center")
Gui.F_ViewGL.GsGCDetail.SetColumnProperty("gvGL","Mode","HeaderHAlignment","Center")
Gui.F_ViewGL.GsGCDetail.SetColumnProperty("gvGL","Batch","CellHAlignment","Center")
Gui.F_ViewGL.GsGCDetail.SetColumnProperty("gvGL","PostDate","CellHAlignment","Center")
Gui.F_ViewGL.GsGCDetail.SetColumnProperty("gvGL","Line","CellHAlignment","Center")
Gui.F_ViewGL.GsGCDetail.SetColumnProperty("gvGL","Currency","CellHAlignment","Center")
Gui.F_ViewGL.GsGCDetail.SetColumnProperty("gvGL","Mode","CellHAlignment","Center")
Gui.F_ViewGL.GsGCDetail.SetColumnProperty("gvGL","PostDate","Caption","Post Date")
Gui.F_ViewGL.GsGCDetail.SetColumnProperty("gvGL","AmountF","Caption","Forex Amt")
F.Intrinsic.String.Build("Exch. Rate to {0}",V.Global.sCoCurrency.Trim,V.Local.sLabel)
Gui.F_ViewGL.GsGCDetail.SetColumnProperty("gvGL","ExchRate","Caption",V.Local.sLabel)
Gui.F_ViewGL.GsGCDetail.SetColumnProperty("gvGL","Amount","Caption","Base Amount")
Gui.F_ViewGL.GsGCDetail.SetColumnProperty("gvGL","InvcDate","Caption","Invoice Date")
Gui.F_ViewGL.GsGCDetail.SetColumnProperty("gvGL","CheckDate","Caption","Check Date")
Gui.F_ViewGL.GsGCDetail.SetColumnProperty("gvGL","VendCust","Caption","Vend/Cust #")
Gui.F_ViewGL.GsGCDetail.SetColumnProperty("gvGL","JERef","Caption","JE Batch Reference")
Gui.F_ViewGL.GsGCDetail.SetColumnProperty("gvGL","CheckNum","Caption","Check #")
Gui.F_ViewGL.GsGCDetail.SetColumnProperty("gvGL","InvcNote","Caption","Invoice Note")
Gui.F_ViewGL.GsGCDetail.SetColumnProperty("gvGL","PostDate","DisplayCustomDatetime","d")
Gui.F_ViewGL.GsGCDetail.SetColumnProperty("gvGL","InvcDate","DisplayCustomDatetime","d")
Gui.F_ViewGL.GsGCDetail.SetColumnProperty("gvGL","CheckDate","DisplayCustomDatetime","d")
Gui.F_ViewGL.GsGCDetail.SetColumnProperty("gvGL","Amount","DisplayCustomNumeric","#,###,##0.00")
Gui.F_ViewGL.GsGCDetail.SetColumnProperty("gvGL","AmountF","DisplayCustomNumeric","#,###,##0.00")
Gui.F_ViewGL.GsGCDetail.SetColumnProperty("gvGL","ExchRate","DisplayCustomNumeric","#,###,##0.00000")
Gui.F_ViewGL.GsGCDetail.SetColumnProperty("gvGL","Batch","MinWidth","80")
Gui.F_ViewGL.GsGCDetail.SetColumnProperty("gvGL","PostDate","MinWidth","100")
Gui.F_ViewGL.GsGCDetail.SetColumnProperty("gvGL","Line","MinWidth","40")
Gui.F_ViewGL.GsGCDetail.SetColumnProperty("gvGL","Description","MinWidth","200")
Gui.F_ViewGL.GsGCDetail.SetColumnProperty("gvGL","Reference","MinWidth","110")
Gui.F_ViewGL.GsGCDetail.SetColumnProperty("gvGL","Amount","MinWidth","100")
Gui.F_ViewGL.GsGCDetail.SetColumnProperty("gvGL","Currency","MinWidth","60")
Gui.F_ViewGL.GsGCDetail.SetColumnProperty("gvGL","ExchRate","MinWidth","100")
Gui.F_ViewGL.GsGCDetail.SetColumnProperty("gvGL","AmountF","MinWidth","100")
Gui.F_ViewGL.GsGCDetail.SetColumnProperty("gvGL","InvcDate","MinWidth","100")
Gui.F_ViewGL.GsGCDetail.SetColumnProperty("gvGL","CheckDate","MinWidth","100")
Gui.F_ViewGL.GsGCDetail.SetColumnProperty("gvGL","VendCust","MinWidth","100")
Gui.F_ViewGL.GsGCDetail.SetColumnProperty("gvGL","JERef","MinWidth","100")
Gui.F_ViewGL.GsGCDetail.SetColumnProperty("gvGL","CheckNum","MinWidth","100")
Gui.F_ViewGL.GsGCDetail.SetColumnProperty("gvGL","InvcNote","MinWidth","100")
Gui.F_ViewGL.GsGCDetail.SetColumnProperty("gvGL","Invoice","MinWidth","150")
Gui.F_ViewGL.GsGCDetail.SetColumnProperty("gvGL","Mode","MinWidth","80")
Gui.F_ViewGL.GsGCDetail.SetColumnProperty("gvGL","Batch","Fixed","Left")
Gui.F_ViewGL.GsGCDetail.SetColumnProperty("gvGL","PostDate","Fixed","Left")
Gui.F_ViewGL.GsGCDetail.SetColumnProperty("gvGL","Line","Fixed","Left")
Gui.F_ViewGL.GsGCDetail.SetColumnProperty("gvGL","Batch","HeaderFontBold",True)
Gui.F_ViewGL.GsGCDetail.SetColumnProperty("gvGL","PostDate","HeaderFontBold",True)
Gui.F_ViewGL.GsGCDetail.SetColumnProperty("gvGL","Line","HeaderFontBold",True)
Gui.F_ViewGL.GsGCDetail.SetColumnProperty("gvGL","Description","HeaderFontBold",True)
Gui.F_ViewGL.GsGCDetail.SetColumnProperty("gvGL","Reference","HeaderFontBold",True)
Gui.F_ViewGL.GsGCDetail.SetColumnProperty("gvGL","Amount","HeaderFontBold",True)
Gui.F_ViewGL.GsGCDetail.SetColumnProperty("gvGL","Currency","HeaderFontBold",True)
Gui.F_ViewGL.GsGCDetail.SetColumnProperty("gvGL","ExchRate","HeaderFontBold",True)
Gui.F_ViewGL.GsGCDetail.SetColumnProperty("gvGL","AmountF","HeaderFontBold",True)
Gui.F_ViewGL.GsGCDetail.SetColumnProperty("gvGL","Invoice","HeaderFontBold",True)
Gui.F_ViewGL.GsGCDetail.SetColumnProperty("gvGL","InvcDate","HeaderFontBold",True)
Gui.F_ViewGL.GsGCDetail.SetColumnProperty("gvGL","CheckDate","HeaderFontBold",True)
Gui.F_ViewGL.GsGCDetail.SetColumnProperty("gvGL","VendCust","HeaderFontBold",True)
Gui.F_ViewGL.GsGCDetail.SetColumnProperty("gvGL","JERef","HeaderFontBold",True)
Gui.F_ViewGL.GsGCDetail.SetColumnProperty("gvGL","CheckNum","HeaderFontBold",True)
Gui.F_ViewGL.GsGCDetail.SetColumnProperty("gvGL","InvcNote","HeaderFontBold",True)
Gui.F_ViewGL.GsGCDetail.SetColumnProperty("gvGL","Mode","HeaderFontBold",True)

Gui.F_ViewGL.GsGCDetail.SetRowAppearance("gvGL",0,"Fontbold",True)
Gui.F_ViewGL.GsGCDetail.SetRowAppearance("gvGL",V.DataTable.dtDetail.RowCount--,"Fontbold",True)
Program.Sub.GridViewSetup.End

Program.Sub.SetContextMenus.Start
Gui.F_ViewGL..ContextMenuCreate("CTXDETAIL")
Gui.F_ViewGL.GsGCDetail.ContextMenuAttach("CTXDETAIL")
Gui.F_ViewGL..ContextMenuAddItem("CTXDETAIL","Export",0,"Export")
Gui.F_ViewGL..ContextMenuSetItemEventHandler("CTXDETAIL","Export","ContextMenuExport")
Program.Sub.SetContextMenus.End

Program.Sub.ContextMenuExport.Start
V.Local.bExist.Declare
V.Local.sFilename.Declare

F.Intrinsic.Control.If(V.DataTable.dtDetail.Exists,=,True)
	F.Intrinsic.Control.If(V.DataTable.dtDetail.RowCount,>,0)
		F.Automation.MSExcel.CheckPresence(V.Local.bExist)
		F.Intrinsic.Control.If(V.Local.bExist)
			F.Intrinsic.UI.ShowSaveFileDialog("","*.xlsx|",V.Local.sFilename)
			F.Intrinsic.Control.If(V.Local.sFileName,<>,"***CANCEL***")
				F.Intrinsic.String.Concat(V.Local.sFilename,".xlsx",V.Local.sFilename)
				Gui.F_ViewGL.GsGCDetail.Export(V.Local.sFilename,"xlsx")
				F.Intrinsic.Task.ShellExec(0,"",V.Local.sFilename,"","",1)
			F.Intrinsic.Control.EndIf
		F.Intrinsic.Control.Else
			F.Intrinsic.UI.ShowSaveFileDialog("","*.csv|",V.Local.sFilename)
			F.Intrinsic.Control.If(V.Local.sFileName,<>,"***CANCEL***")
				F.Intrinsic.String.Concat(V.Local.sFilename,".csv",V.Local.sFilename)
				Gui.F_ViewGL.GsGCDetail.Export(V.Local.sFilename,"csv")
				F.Intrinsic.Task.ShellExec(0,"",V.Local.sFilename,"","",1)
			F.Intrinsic.Control.EndIf
		F.Intrinsic.Control.EndIf
	F.Intrinsic.Control.EndIf
F.Intrinsic.Control.EndIf
Program.Sub.ContextMenuExport.End

Program.Sub.Comments.Start
${$0$}$View GL Detail with Foreign Currency$}$MHERTANTO$}$9/27/2019 3:20:43 PM$}$False
${$3$}$0$}$$}$0$}$-1$}$$}$12:00:00 AM$}$This program is GL manual journal that allows multi-currency entry. Data related to exchange rate are stored in a custom table. The program also stores batch posted in AP and AR which is in foreign currency.
${$5$}$2.0.0.0$}$2
${$6$}$dyunus$}$20240205171135121$}$xZ6SHi8g7O0Qsxe6AiO2NH3PnOKQRy0TlZzN4+foWpaS73uJeJgsBCO/gFRruneXoIC7Cbbb4Sg=
Program.Sub.Comments.End